---
- hosts: hermes
  tasks:
    - name: Install python-kubernetes
      become: true
      ansible.builtin.apt:
        name: python3-kubernetes
        state: present

    - name: Install nfs-common
      become: true
      ansible.builtin.apt:
        name: nfs-common
        state: present

    - name: Install microk8s
      become: true
      community.general.snap:
        name: microk8s
        classic: true
        channel: "{{ microk8s_channel }}"

    - name: Add user to microk8s group
      become: true
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: microk8s
        append: true

    - name: Wait for microk8s to be ready
      ansible.builtin.command: microk8s status --wait-ready --timeout 1800
      changed_when: false

    - name: Allow packet forwarding
      become: true
      ansible.builtin.iptables:
        chain: FORWARD
        policy: ACCEPT

    - name: Install iptables-persistent
      become: true
      ansible.builtin.apt:
        name: iptables-persistent
        state: present

    - name: Update microk8s core addons repo
      become: true
      ansible.builtin.command: microk8s addons repo update core

    - name: Enable microk8s addons
      ansible.builtin.command: microk8s enable {{ item }}
      register: addon_result
      changed_when: addon_result.stdout is not search("is already enabled")
      loop:
        - "core/dns:{{ upstream_dns }}"
        - core/hostpath-storage
        - core/rbac
        - core/ingress
        - core/observability
        - core/cert-manager
        - "core/metallb:{{ metallb_ip_range }}"

    - name: Install kubectl
      become: true
      community.general.snap:
        name: kubectl
        classic: true

    - name: Create kubeconfig directory
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: "0755"

    - name: Set owner of kubeconfig directory to {{ ansible_user }}
      become: true
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        owner: "{{ ansible_user }}"
        recurse: true

    - name: Generate kubeconfig file
      ansible.builtin.command: microk8s config
      register: kubeconfig
      changed_when: false
      no_log: true

    - name: Save kubeconfig file
      ansible.builtin.copy:
        content: "{{ kubeconfig.stdout }}"
        dest: "{{ ansible_env.HOME }}/.kube/config"

    - name: Set kubeconfig file permissions
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.kube/config"
        mode: "0600"

    - name: Configure MetalLB
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', './definitions/configmap-metallb.yaml') | from_yaml }}"

    - name: Advertise Load Balanced IP
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', './definitions/L2Advertisement-metallb.yaml') | from_yaml }}"

    - name: Configure Nginx Ingress Controller
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', './definitions/configmap-nginx.yaml') | from_yaml }}"

    - name: Load Balance Ingress Controller
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', './definitions/service-ingress.yaml') | from_yaml }}"

    - name: Create Ingress for Observability
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', './definitions/ingress-observability.yaml') | from_yaml }}"

    - name: Install helm
      become: true
      community.general.snap:
        name: helm
        classic: true

    - name: Create Production Issuer
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', './definitions/issuer-prod.yaml') | from_yaml }}"

    - name: Create Staging Issuer
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', './definitions/issuer-staging.yaml') | from_yaml }}"

    - name: Add DNS Entry to Cluster Certificate
      ansible.builtin.lineinfile:
        path: /var/snap/microk8s/current/certs/csr.conf.template
        regexp: '^DNS\.6'
        line: "DNS.6 = {{ inventory_hostname }}.{{ local_domain }}"
        insertafter: 'DNS\.5 = kubernetes\.default\.svc\.cluster\.local'

    - name: Wait for Certificate to Rotate
      ansible.builtin.pause:
        minutes: 2

    - name: Create PVs
      kubernetes.core.k8s:
        definition: "{{ lookup('template', '{{ item }}') | from_yaml }}"
      with_fileglob:
        - ./definitions/persistent-volumes/*.yaml
