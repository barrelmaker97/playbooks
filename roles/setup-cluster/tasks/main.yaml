---
- name: Install python-kubernetes
  become: true
  ansible.builtin.apt:
    name: python3-kubernetes
    state: present

- name: Install nfs-common
  become: true
  ansible.builtin.apt:
    name: nfs-common
    state: present

- name: Install microk8s
  become: true
  community.general.snap:
    name: microk8s
    classic: true
    channel: "{{ microk8s_channel }}"

- name: Add user to microk8s group
  become: true
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: microk8s
    append: true

- name: Wait for microk8s to be ready
  ansible.builtin.command: microk8s status --wait-ready --timeout 1800
  changed_when: false

- name: Allow packet forwarding
  become: true
  ansible.builtin.iptables:
    chain: FORWARD
    policy: ACCEPT

- name: Install iptables-persistent
  become: true
  ansible.builtin.apt:
    name: iptables-persistent
    state: present

- name: Update microk8s core addons repo
  become: true
  ansible.builtin.command: microk8s addons repo update core
  register: update_result
  changed_when: update_result.stdout is not search("Already up to date")

- name: Enable microk8s addons
  ansible.builtin.command: microk8s enable {{ item }}
  register: addon_result
  changed_when: addon_result.stdout is not search("is already enabled")
  loop:
    - "core/dns:{{ upstream_dns }}"
    - core/hostpath-storage
    - core/rbac
    - core/ingress
    - core/observability
    - core/cert-manager
    - "core/metallb:{{ metallb_ip_range }}"

- name: Install kubectl
  become: true
  community.general.snap:
    name: kubectl
    classic: true

- name: Create kubeconfig directory
  ansible.builtin.file:
    path: "{{ kube_dir }}"
    state: directory
    mode: "0755"

- name: Set owner of kubeconfig directory to {{ ansible_user }}
  become: true
  ansible.builtin.file:
    path: "{{ kube_dir }}"
    state: directory
    owner: "{{ ansible_user }}"
    recurse: true

- name: Generate kubeconfig file
  ansible.builtin.command: microk8s config
  register: kubeconfig
  changed_when: false
  no_log: true

- name: Save kubeconfig file
  ansible.builtin.copy:
    content: "{{ kubeconfig.stdout }}"
    dest: "{{ kube_dir }}/config"
    mode: "0600"

- name: Configure MetalLB
  kubernetes.core.k8s:
    state: present
    template: configmap-metallb.yaml

- name: Advertise Load Balanced IP
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'files/L2Advertisement-metallb.yaml') | from_yaml }}"

- name: Configure Nginx Ingress Controller
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'files/configmap-nginx.yaml') | from_yaml }}"

- name: Load Balance Ingress Controller
  kubernetes.core.k8s:
    state: present
    template: service-ingress.yaml

- name: Create Ingress for Observability
  kubernetes.core.k8s:
    state: present
    template: ingress-observability.yaml

- name: Install helm
  become: true
  community.general.snap:
    name: helm
    classic: true

- name: Create Production Issuer
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'files/issuer-prod.yaml') | from_yaml }}"

- name: Create Staging Issuer
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'files/issuer-staging.yaml') | from_yaml }}"

- name: Add DNS Entry to Cluster Certificate
  ansible.builtin.lineinfile:
    path: /var/snap/microk8s/current/certs/csr.conf.template
    regexp: '^DNS\.6'
    line: "DNS.6 = {{ inventory_hostname }}.{{ local_domain }}"
    insertafter: 'DNS\.5 = kubernetes\.default\.svc\.cluster\.local'

- name: Wait for Certificate to Rotate
  ansible.builtin.pause:
    minutes: 2

- name: Create Local Storage Directory
  ansible.builtin.file:
    path: "{{ local_storage_dir }}"
    state: directory
    mode: "0755"

- name: Create PVs
  kubernetes.core.k8s:
    template: "{{ item }}"
  with_fileglob:
    - templates/pv-*.yaml

- name: Create User Namespace
  kubernetes.core.k8s:
    state: present
    template: namespace-user.yaml

- name: Create User Role Binding
  kubernetes.core.k8s:
    state: present
    template: rolebinding-user.yaml

- name: Create User Resource Quota
  kubernetes.core.k8s:
    state: present
    template: resourcequota-user.yaml

- name: Create User Limit Range
  kubernetes.core.k8s:
    state: present
    template: limitrange-user.yaml

- name: Create local kubeconfig directory
  delegate_to: localhost
  ansible.builtin.file:
    path: "{{ kube_dir }}"
    state: directory
    mode: "0755"

- name: Set owner of local kubeconfig directory to {{ ansible_user }}
  become: true
  delegate_to: localhost
  ansible.builtin.file:
    path: "{{ kube_dir }}"
    state: directory
    owner: "{{ ansible_user }}"
    recurse: true

- name: Generate User Private Key
  delegate_to: localhost
  community.crypto.openssl_privatekey:
    path: "{{ key_file }}"

- name: Generate User CSR
  delegate_to: localhost
  community.crypto.openssl_csr:
    path: "{{ csr_file }}"
    privatekey_path: "{{ key_file }}"
    common_name: "{{ cluster_user }}"

- name: Delete Any Existing User CSR Objects
  kubernetes.core.k8s:
    state: absent
    api_version: certificates.k8s.io/v1
    kind: CertificateSigningRequest
    name: "{{ cluster_user }}"

- name: Create User CSR Object
  kubernetes.core.k8s:
    state: present
    template: csr-user.yaml.j2
  vars:
    user_csr_base64: "{{ lookup('file', '{{ csr_file }}') | b64encode }}"

- name: Approve User CSR
  ansible.builtin.command: kubectl certificate approve {{ cluster_user }}

- name: Get User Certificate
  kubernetes.core.k8s_info:
    api_version: certificates.k8s.io/v1
    kind: CertificateSigningRequest
    name: "{{ cluster_user }}"
  register: user_cert

- name: Save User Certificate
  delegate_to: localhost
  ansible.builtin.copy:
    content: "{{ user_cert.resources[0].status.certificate | b64decode }}"
    dest: "{{ crt_file }}"
    mode: "0644"

- name: Get Cluster Certificate
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ConfigMap
    name: kube-root-ca.crt
    namespace: kube-system
  register: cluster_cert

- name: Save Cluster Certificate
  delegate_to: localhost
  ansible.builtin.copy:
    content: "{{ cluster_cert.resources[0]['data']['ca.crt'] }}"
    dest: "{{ cluster_crt_file }}"
    mode: "0644"

- name: Create User in Kubeconfig
  delegate_to: localhost
  ansible.builtin.command: >-
    kubectl config set-credentials {{ cluster_user }}
    --client-key={{ key_file }}
    --client-certificate={{ crt_file }}

- name: Create Cluster in Kubeconfig
  delegate_to: localhost
  ansible.builtin.command: >-
    kubectl config set-cluster microk8s-cluster
    --server=https://{{ inventory_hostname }}.{{ local_domain }}:{{ cluster_port }}
    --certificate-authority={{ cluster_crt_file }}

- name: Create Context in Kubeconfig
  delegate_to: localhost
  ansible.builtin.command: >-
    kubectl config set-context {{ cluster_user }}
    --cluster=microk8s-cluster
    --user={{ cluster_user }}
    --namespace={{ cluster_user }}

- name: Use Context in Kubeconfig
  delegate_to: localhost
  ansible.builtin.command: >-
    kubectl config use-context {{ cluster_user }}
