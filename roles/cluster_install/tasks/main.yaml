---
- name: Create Talos config directory
  ansible.builtin.file:
    path: "{{ talos_config_dir }}"
    state: directory
    mode: '0700'

- name: Check if secrets exist
  ansible.builtin.stat:
    path: "{{ talos_config_dir }}/secrets.yaml"
  register: secrets_file

- name: Generate Secrets
  when: not secrets_file.stat.exists
  ansible.builtin.command: talosctl gen secrets --output-file "{{ talos_config_dir }}/secrets.yaml"

- name: Get Talos Image ID
  ansible.builtin.uri:
    url: https://factory.talos.dev/schematics
    method: POST
    src: customization.yaml
    status_code: 201
  register: factory_response

- name: Print ID
  debug:
    msg: "{{ factory_response.json.id }}"

- name: Template Machine Config Patch
  ansible.builtin.template:
    src: controlplane-patch.yaml
    dest: "{{ talos_config_dir }}/patch.yaml"
    mode: "0644"

- name: Generate Machine Config
  ansible.builtin.command: >
    talosctl gen config --force
    --with-docs=false
    --with-examples=false
    --with-secrets "{{ talos_config_dir }}/secrets.yaml"
    --config-patch-control-plane "@{{ talos_config_dir }}/patch.yaml"
    --output "{{ talos_config_dir }}"
    "{{ cluster_host }}" "https://kube.{{ cluster_domain }}:{{ cluster_port }}"

- name: Clean Up Machine Config Patch
  ansible.builtin.file:
    path: "{{ talos_config_dir }}/patch.yaml"
    state: absent

- name: Template NUT config
  ansible.builtin.template:
    src: nut-extension.yaml
    dest: "{{ talos_config_dir }}/nut-extension.yaml"
    mode: "0644"

- name: Print ISO download link
  ansible.builtin.debug:
    msg: "https://factory.talos.dev/image/{{ factory_response.json.id }}/v{{ talos_version }}/metal-amd64-secureboot.iso"

- name: Wait for nodes bootup
  ansible.builtin.pause:
    prompt: "Press enter once all nodes have been booted using the above ISO"
