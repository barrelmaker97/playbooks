---
- name: Install Helm
  become: true
  community.general.snap:
    name: helm
    classic: true

- name: Install Helm Diff
  kubernetes.core.helm_plugin:
    state: present
    plugin_path: "https://github.com/databus23/helm-diff"

- name: Add Helm Repos
  tags:
    - longhorn
  kubernetes.core.helm_repository:
    name: "{{ item.key }}"
    repo_url: "{{ item.value }}"
  loop: "{{ helm_repos | dict2items }}"
  vars:
    helm_repos:
      ingress-nginx: https://kubernetes.github.io/ingress-nginx
      jetstack: https://charts.jetstack.io
      longhorn: https://charts.longhorn.io
      metallb: https://metallb.github.io/metallb
      metrics-server: https://kubernetes-sigs.github.io/metrics-server
      prometheus-community: https://prometheus-community.github.io/helm-charts

- name: Deploy Metrics Server
  kubernetes.core.helm:
    name: metrics-server
    chart_ref: metrics-server/metrics-server
    chart_version: "{{ metrics_server_version }}"
    release_namespace: kube-system
    update_repo_cache: true
    wait: true

- name: Get Node IPs
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Node
  register: nodes

- name: Deploy Prometheus Stack
  kubernetes.core.helm:
    name: kube-prometheus-stack
    chart_ref: prometheus-community/kube-prometheus-stack
    chart_version: "{{ kube_prometheus_stack_version }}"
    release_namespace: monitoring
    create_namespace: true
    update_repo_cache: true
    wait: true
    release_values: "{{ values_file | from_yaml }}"
  vars:
    node_ips: "{{ nodes.resources[0].status.addresses | selectattr('type', '==', 'InternalIP') | map(attribute='address') }}"
    values_file:
      alertmanager:
        ingress:
          enabled: true
          ingressClassName: nginx
          hosts:
            - "alertmanager.{{ cluster_domain }}"
      grafana:
        ingress:
          enabled: true
          ingressClassName: nginx
          annotations:
            nginx.ingress.kubernetes.io/custom-headers: monitoring/monitoring-custom-headers
          hosts:
            - "grafana.{{ cluster_domain }}"
      prometheus:
        ingress:
          enabled: true
          ingressClassName: nginx
          hosts:
            - "prometheus.{{ cluster_domain }}"
        prometheusSpec:
          serviceMonitorSelectorNilUsesHelmValues: false
      kubeScheduler:
        endpoints: "{{ node_ips }}"
      kubeControllerManager:
        endpoints: "{{ node_ips }}"
      kubeProxy:
        endpoints: "{{ node_ips }}"

- name: Create Custom Headers ConfigMap for Monitoring
  kubernetes.core.k8s:
    state: present
    template: configmap-monitoring.yaml

- name: Create MetalLB Namespace
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: metallb-system
        labels:
          pod-security.kubernetes.io/enforce: privileged
          pod-security.kubernetes.io/audit: privileged
          pod-security.kubernetes.io/warn: privileged

- name: Deploy MetalLB
  kubernetes.core.helm:
    name: metallb
    chart_ref: metallb/metallb
    chart_version: "{{ metallb_version }}"
    release_namespace: metallb-system
    update_repo_cache: true
    wait: true
    release_values: "{{ values_file | from_yaml }}"
  vars:
    values_file:
      prometheus:
        namespace: monitoring
        rbacPrometheus: false
        serviceMonitor:
          enabled: true

- name: Create IP Address Pool
  kubernetes.core.k8s:
    state: present
    template: ipaddresspool-metallb.yaml

- name: Advertise Load Balanced IP
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'files/L2Advertisement-metallb.yaml') | from_yaml }}"

- name: Deploy Ingress Nginx
  kubernetes.core.helm:
    name: ingress-nginx
    chart_ref: ingress-nginx/ingress-nginx
    chart_version: "{{ ingress_nginx_version }}"
    release_namespace: ingress-nginx
    create_namespace: true
    update_repo_cache: true
    wait: true

- name: Set Nginx Ingress Controller Custom Headers
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'files/configmap-custom-headers.yaml') | from_yaml }}"

- name: Set Nginx Ingress Controller Config
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'files/configmap-nginx.yaml') | from_yaml }}"

- name: Deploy Cert Manager
  kubernetes.core.helm:
    name: cert-manager
    chart_ref: jetstack/cert-manager
    chart_version: "{{ cert_manager_version }}"
    release_namespace: cert-manager
    create_namespace: true
    update_repo_cache: true
    wait: true
    release_values: "{{ values_file | from_yaml }}"
  vars:
    values_file:
      prometheus:
        enabled: true
        servicemonitor:
          enabled: true
      crds:
        enabled: true

- name: Create Production Issuer
  kubernetes.core.k8s:
    state: present
    template: issuer-prod.yaml

- name: Create Staging Issuer
  kubernetes.core.k8s:
    state: present
    template: issuer-staging.yaml

- name: Deploy Longhorn
  tags:
    - longhorn
  kubernetes.core.helm:
    name: longhorn
    chart_ref: longhorn/longhorn
    chart_version: "{{ longhorn_version }}"
    release_namespace: longhorn-system
    create_namespace: true
    update_repo_cache: true
    wait: true
    release_values: "{{ values_file | from_yaml }}"
  vars:
    values_file:
      csi:
        attacherReplicaCount: 1
        provisionerReplicaCount: 1
        resizerReplicaCount: 1
        snapshotterReplicaCount: 1
        kubeletRootDir: /var/snap/microk8s/common/var/lib/kubelet
      longhornUI:
        replicas: 1
      defaultSettings:
        allowVolumeCreationWithDegradedAvailability: false
        backupTarget: nfs://soteria.lan:/volume1/longhorn-backupstore
        defaultDataLocality: best-effort
        defaultReplicaCount: 1
        replicaAutoBalance: least-effort
        storageMinimalAvailablePercentage: 10
      ingress:
        enabled: true
        ingressClassName: nginx
        host: "longhorn.{{ cluster_domain }}"

- name: Create Longhorn Local Storage Class
  tags:
    - longhorn
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: longhorn-local
      provisioner: driver.longhorn.io
      allowVolumeExpansion: true
      reclaimPolicy: Retain
      volumeBindingMode: Immediate
      parameters:
        dataEngine: v1
        dataLocality: strict-local
        numberOfReplicas: "1"
        disableRevisionCounter: "true"
        fsType: ext4

- name: Create Default Recurring Snapshot
  tags:
    - longhorn
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: longhorn.io/v1beta2
      kind: RecurringJob
      metadata:
        name: default-snapshotter
        namespace: longhorn-system
      spec:
        concurrency: 1
        cron: 0 * * * ?
        groups:
          - default
        labels: {}
        name: default-snapshotter
        parameters: {}
        retain: 24
        task: snapshot

- name: Create Default Recurring Backup
  tags:
    - longhorn
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: longhorn.io/v1beta2
      kind: RecurringJob
      metadata:
        name: default-backup
        namespace: longhorn-system
      spec:
        concurrency: 1
        cron: 0 3 * * ?
        groups:
          - default
        labels: {}
        name: default-backup
        parameters:
          full-backup-interval: "15"
        retain: 30
        task: backup

- name: Create Jellyfin NFS Volumes
  kubernetes.core.k8s:
    template: "{{ item }}"
  with_fileglob:
    - templates/pv-*.yaml
